// Generated by CoffeeScript 1.3.3
(function() {

  window.LocalStorage = (function() {

    function LocalStorage(callback) {
      var name, record;
      name = "name";
      record = "record";
      if (callback == null) {
        callback = function(info) {
          return utils.log("storage ready: " + info);
        };
      }
      this.storage = Lawnchair({}, callback);
    }

    LocalStorage.prototype.save = function(key, value, callback) {
      var saveObj;
      if (callback == null) {
        callback = function(obj) {
          return utils.log(obj);
        };
      }
      saveObj = {
        "key": key,
        "value": value
      };
      return this.storage.save(saveObj);
    };

    LocalStorage.prototype.saveMultiple = function(keyValueArray, callback) {
      if (callback == null) {
        callback = function(obj) {
          return utils.log(obj);
        };
      }
      return this.storage.batch(keyValueArray, callback);
    };

    LocalStorage.prototype.get = function(key, callback) {
      var cb;
      cb = function(obj) {
        return callback(obj && obj.value ? obj.value : null);
      };
      return this.storage.get(key, cb);
    };

    LocalStorage.prototype.getEverything = function(callback) {
      if (callback == null) {
        callback = function(obj) {
          return utils.log(obj);
        };
      }
      return this.storage.all(callback);
    };

    LocalStorage.prototype.exists = function(key, callback) {
      if (callback == null) {
        callback = function() {
          return function(exists) {
            return utils.log("Existence is " + exists);
          };
        };
      }
      return this.storage.exists(key, callback);
    };

    LocalStorage.prototype.remove = function(key, callback) {
      if (callback == null) {
        callback = function(obj) {
          return utils.log(obj);
        };
      }
      return this.storage.remove(key, callback);
    };

    LocalStorage.prototype.removeMultiple = function(array, callback) {
      if (callback == null) {
        callback = function(obj) {
          return utils.log(obj);
        };
      }
      return this.storage.remove(array, callback);
    };

    LocalStorage.prototype.removeEverything = function(callback) {
      if (callback == null) {
        callback = function(obj) {
          return utils.log(obj);
        };
      }
      return this.storage.nuke(callback);
    };

    return LocalStorage;

  })();

}).call(this);
