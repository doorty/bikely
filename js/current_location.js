// Generated by CoffeeScript 1.3.3
(function() {

  window.CurrentLocation = (function() {

    function CurrentLocation() {
      this.latLng = null;
      this.geolocation = navigator.geolocation;
      this.watchId = null;
    }

    CurrentLocation.prototype.getErrorMessage = function(code) {
      switch (code) {
        case 0:
          return "UNKNOWN_ERROR";
        case 1:
          return "PERMISSION_DENIED";
        case 2:
          return "POSITION_UNAVAILABLE";
        case 3:
          return "TIMEOUT";
        default:
          return code;
      }
    };

    CurrentLocation.prototype.updatePosition = function(latLngArray) {
      return this.latLng = latLngArray && latLngArray.length === 2 ? latLngArray : null;
    };

    CurrentLocation.prototype.stopWatching = function() {
      if (this.watchId) {
        return this.geolocation.clearWatch(this.watchId);
      }
    };

    CurrentLocation.prototype.watchPosition = function(callback) {
      var gotPosition, unknownPosition,
        _this = this;
      gotPosition = function(location) {
        var lat, latLngArray, lng;
        lat = location.coords.latitude;
        lng = location.coords.longitude;
        latLngArray = [lat, lng];
        _this.updatePosition(latLngArray);
        if (callback != null) {
          return callback(latLngArray, 'SUCCESS');
        }
      };
      unknownPosition = function(positionError) {
        return callback(null, _this.getErrorMessage(positionError.code));
      };
      if (this.geolocation) {
        return this.watchId = this.geolocation.watchPosition(gotPosition, unknownPosition, {
          enableHighAccuracy: true,
          maximumAge: 30000,
          timeout: 27000
        });
      } else {
        return callback(null, 'UNSUPPORTED');
      }
    };

    CurrentLocation.prototype.getPosition = function(callback) {
      var gotPosition, unknownPosition,
        _this = this;
      gotPosition = function(location) {
        var lat, latLngArray, lng;
        lat = location.coords.latitude;
        lng = location.coords.longitude;
        latLngArray = [lat, lng];
        _this.updatePosition(latLngArray);
        if (callback != null) {
          return callback(latLngArray, 'SUCCESS');
        }
      };
      unknownPosition = function(positionError) {
        return callback(null, _this.getErrorMessage(positionError.code));
      };
      if (this.geolocation) {
        return this.geolocation.getCurrentPosition(gotPosition, unknownPosition);
      } else {
        return callback(null, 'UNSUPPORTED');
      }
    };

    return CurrentLocation;

  })();

}).call(this);
