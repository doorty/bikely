// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.BikeMapPage = (function() {

    function BikeMapPage() {
      this.mapClicked = __bind(this.mapClicked, this);

      this.destinationGeocodeCallback = __bind(this.destinationGeocodeCallback, this);

      this.directionsCallback = __bind(this.directionsCallback, this);

      this.gotPosition = __bind(this.gotPosition, this);
      this.destinationInput = "#destination-input";
      this.destinationList = "#destination-list";
      this.destinationListWrapper = "#destination-list-wrapper";
      this.mapCanvas = "map-canvas";
      this.defaultCity = [37.7750, -122.4183];
      this.destinationLiHeight = 35;
      this.localStorage = null;
      this.location = {
        currentLocation: this.defaultCity,
        origin: null,
        destination: null
      };
      this.setupMap();
      this.setupLocalStorage();
      this.setupInput();
    }

    BikeMapPage.prototype.updateMapOrigin = function(latLngArray) {
      this.location.origin = latLngArray;
      return this.bikemap.updateOrigin(latLngArray);
    };

    BikeMapPage.prototype.updateMapDestinationAndDirections = function(destination) {
      $(this.destinationInput).val(destination.address);
      this.bikemap.updateDestination(destination.location);
      this.bikemap.calcRoute(this.directionsCallback);
      $(this.destinationList).empty();
      this.location.destination = destination;
      return this.localStorage.saveDirections(this.location.origin, this.location.destination, null);
    };

    BikeMapPage.prototype.gotPosition = function(latLngArray, status) {
      if (latLngArray != null) {
        utils.log("current position is " + latLngArray[0] + ", " + latLngArray[1]);
        this.location.currentLocation = latLngArray;
        this.updateMapOrigin(latLngArray);
        return this.localStorage.saveCurrentLocation(latLngArray);
      } else {
        return utils.log("Where are you? " + status);
      }
    };

    BikeMapPage.prototype.directionsCallback = function(status) {
      return utils.log(status);
    };

    BikeMapPage.prototype.hideDestinationOptions = function() {
      return $(this.destinationListWrapper).removeClass("show");
    };

    BikeMapPage.prototype.showDestinationOptions = function() {
      return $(this.destinationListWrapper).addClass("show");
    };

    BikeMapPage.prototype.clearDestinationOptions = function() {
      return $(this.destinationListWrapper).empty();
    };

    BikeMapPage.prototype.updateDestinationOptions = function(destinations) {
      var addDestination, destination, destinationList, destinationListElements, destinationListWrapperTop, listElementsFrag, _i, _len,
        _this = this;
      destinationList = $(this.destinationList);
      destinationListWrapperTop = destinations.length * this.destinationLiHeight + this.destinationLiHeight;
      listElementsFrag = $(document.createDocumentFragment());
      destinationListElements = "";
      addDestination = function(destination) {
        var address, event, li;
        address = destination.address.length > 32 ? destination.address.slice(0, 32) + "..." : destination.address;
        event = utils.isTouchDevice() ? "tap" : "click";
        li = $("<li/>").one(event, (function() {
          _this.updateMapDestinationAndDirections(destination);
          return _this.hideDestinationOptions();
        }));
        address = $("<span/>").addClass("address").attr("data-location", destination.location).text(address);
        li.append(address);
        return listElementsFrag.append(li);
      };
      for (_i = 0, _len = destinations.length; _i < _len; _i++) {
        destination = destinations[_i];
        addDestination(destination);
      }
      return destinationList.empty().append(listElementsFrag);
    };

    BikeMapPage.prototype.destinationGeocodeCallback = function(destinations) {
      var numOfDestinations;
      numOfDestinations = destinations.length;
      switch (numOfDestinations) {
        case 0:
          return alert("Sorry, we couldn't find that in your area");
        case 1:
          return this.updateMapDestinationAndDirections(destinations[0]);
        default:
          this.updateDestinationOptions(destinations);
          return this.showDestinationOptions();
      }
    };

    BikeMapPage.prototype.destinationEntered = function(address) {
      return this.bikemap.getLatLng(address, this.destinationGeocodeCallback);
    };

    BikeMapPage.prototype.mapClicked = function(event) {
      return this.hideDestinationOptions();
    };

    BikeMapPage.prototype.setupLocalStorage = function() {
      var currentLocationCallback, directionsCallback,
        _this = this;
      this.localStorage = new BikeLocalStorage();
      currentLocationCallback = function(location) {
        if (location != null) {
          _this.location.currentLocation = location;
          _this.updateMapOrigin(location);
        }
        return _this.localStorage.getDirections(directionsCallback);
      };
      directionsCallback = function(obj) {
        if (obj != null) {
          if (obj.origin != null) {
            _this.location.origin = _this.location.currentLocation != null ? _this.location.currentLocation : obj.origin;
            _this.updateMapOrigin(obj.origin);
          }
          if (obj.destination != null) {
            _this.location.destination = obj.destination;
            return _this.updateMapDestinationAndDirections(obj.destination);
          }
        }
      };
      return this.localStorage.getCurrentLocation(currentLocationCallback);
    };

    BikeMapPage.prototype.setupMap = function() {
      this.bikemap = new BikeMap(this.mapCanvas, this.location.currentLocation);
      this.bikemap.getClickEvents(this.mapClicked);
      this.location = new CurrentLocation();
      return this.location.watchPosition(this.gotPosition);
    };

    BikeMapPage.prototype.setupInput = function() {
      var focus, input, keypress,
        _this = this;
      input = $(this.destinationInput);
      focus = function(event) {
        if ($(_this.destinationList).children().length > 0) {
          return _this.showDestinationOptions();
        }
      };
      keypress = function(event) {
        if (event.which === 13) {
          input.blur();
          return _this.destinationEntered(input.val());
        }
      };
      return input.on("keypress", keypress).on("focus", focus).focus();
    };

    return BikeMapPage;

  })();

}).call(this);
